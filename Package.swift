// swift-tools-version: 5.10

import PackageDescription

/// Cocoapods to SPM Notes:
/// My goal is to to minimal changes to support SPM since this is a fork of OSGeo/PROJ.
///
/// * Creating a custom module.modulemap seems to fix build issues when using the proj.h header
/// * The public interface is C for the proj.h API we use, so we don't need to use the C++ headers exposed
/// * The C++ header search paths are added so under the hood we can find the headers.
/// * If we bundle proj.db, it needs to be in the src/ directory to embed it in the bundle
/// * We need a `BundleHelper` to load the bundle from the SPM auto-created bundle in the next level up (not ideal, but it's data tied to this 9.4 release)
/// * Potentially the 9.6_release_spm can provided proj.db in source, but I haven't figured how that integrates.
/// * CMake autogenerates some files that need to be added like "proj_config.h" (9.6 has more autogenerated files)

let package = Package(
    name: "proj",
    platforms: [
        .iOS(.v13), .macOS(.v12)
    ],
    products: [
        .library(
            name: "proj",
             type: .static,
//            type: .dynamic,
            targets: ["proj"]
        ),
    ],
    targets: [
        .target(
            name: "proj",
            path: "src",
            exclude: [
                "apps",
                "tests",
                "CMakeLists.txt",
                "lib_proj.cmake",
                "check_md5sum.cmake",
                "generate_wkt_parser.cmake",
                "general_doc.dox",
                "wkt1_grammar.y",
                "wkt2_grammar.y",
            ],
            resources: [
            ],
            publicHeadersPath: ".", // The C header files are mixed with src files, we use a modulemap.module to load "proj.h"
            cxxSettings: [
                .headerSearchPath("../include"),
                .headerSearchPath("../include/proj"),
                .headerSearchPath("../include/proj/internal"),
                .headerSearchPath("../include/proj/internal/vendor/nlohmann"),
            ],
            linkerSettings: [
                .linkedLibrary("c++"),
                .linkedLibrary("sqlite3"),
            ]
        )
    ],
    cxxLanguageStandard: .cxx11
)
